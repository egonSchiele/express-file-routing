{"version":3,"file":"index.js","sources":["../../src/config.ts","../../src/utils.ts","../../src/lib.ts","../../src/templates/apiClient.ts","../../src/router.ts","../../src/index.ts"],"sourcesContent":["const config = {\n  VALID_FILE_EXTENSIONS: [\".ts\", \".js\", \".mjs\", \".tsx\", \".jsx\"],\n  INVALID_NAME_SUFFIXES: [\".d.ts\"],\n  IGNORE_PREFIX_CHAR: \"_\",\n  DEFAULT_METHOD_EXPORTS: [\n    \"get\",\n    \"post\",\n    \"put\",\n    \"patch\",\n    \"delete\",\n    \"head\",\n    \"connect\",\n    \"options\",\n    \"trace\"\n  ]\n}\n\nexport default config\n","import type { ParsedPath } from \"path\"\n\nimport type { HandlerWithReturn, Route } from \"./types\"\n\nimport config from \"./config\"\n\nexport const isCjs = () => typeof module !== \"undefined\" && !!module?.exports\n\n/**\n * @param parsedFile\n *\n * @returns Boolean Whether or not the file has to be excluded from route generation\n */\nexport const isFileIgnored = (parsedFile: ParsedPath) =>\n  !config.VALID_FILE_EXTENSIONS.includes(parsedFile.ext.toLowerCase()) ||\n  config.INVALID_NAME_SUFFIXES.some(suffix =>\n    parsedFile.base.toLowerCase().endsWith(suffix)\n  ) ||\n  parsedFile.name.startsWith(config.IGNORE_PREFIX_CHAR) ||\n  parsedFile.dir.startsWith(`/${config.IGNORE_PREFIX_CHAR}`)\n\nexport const isHandler = (\n  handler: unknown\n): handler is HandlerWithReturn | HandlerWithReturn[] =>\n  typeof handler === \"function\" || Array.isArray(handler)\n\n/**\n * @param routes\n *\n * @returns An array of sorted routes based on their priority\n */\nexport const prioritizeRoutes = (routes: Route[]) =>\n  routes.sort((a, b) => a.priority - b.priority)\n\n/**\n * ```ts\n * mergePaths(\"/posts/[id]\", \"index.ts\") -> \"/posts/[id]/index.ts\"\n * ```\n *\n * @param paths An array of mergeable paths\n *\n * @returns A unification of all paths provided\n */\nexport const mergePaths = (...paths: string[]) =>\n  \"/\" +\n  paths\n    .map(path => path.replace(/^\\/|\\/$/g, \"\"))\n    .filter(path => path !== \"\")\n    .join(\"/\")\n\nconst regBackets = /\\[([^}]*)\\]/g\n\nconst transformBrackets = (value: string) =>\n  regBackets.test(value) ? value.replace(regBackets, (_, s) => `:${s}`) : value\n\n/**\n * @param path\n *\n * @returns A new path with all wrapping `[]` replaced by prefixed `:`\n */\nexport const convertParamSyntax = (path: string) => {\n  const subpaths: string[] = []\n\n  for (const subpath of path.split(\"/\")) {\n    subpaths.push(transformBrackets(subpath))\n  }\n\n  return mergePaths(...subpaths)\n}\n\n/**\n * ```ts\n * convertCatchallSyntax(\"/posts/:...catchall\") -> \"/posts/*\"\n * ```\n *\n * @param url\n *\n * @returns A new url with all `:...` replaced by `*`\n */\nexport const convertCatchallSyntax = (url: string) =>\n  url.replace(/:\\.\\.\\.\\w+/g, \"*\")\n\nexport const buildRoutePath = (parsedFile: ParsedPath): string => {\n  // Normalize the directory path\n  const normalizedDir =\n    parsedFile.dir === parsedFile.root\n      ? \"/\"\n      : parsedFile.dir.startsWith(\"/\")\n      ? parsedFile.dir\n      : `/${parsedFile.dir}`\n\n  // Handle index files specially\n  if (parsedFile.name === \"index\") {\n    return normalizedDir === \"/\" ? \"/\" : normalizedDir\n  }\n\n  // Handle index.something files (like index.mod)\n  if (parsedFile.name.startsWith(\"index.\")) {\n    return normalizedDir === \"/\" ? \"/\" : normalizedDir\n  }\n\n  // For regular files\n  return `${normalizedDir === \"/\" ? \"\" : normalizedDir}/${parsedFile.name}`\n}\n\n/**\n * @param path\n *\n * @returns A new path with all wrapping `[]` replaced by prefixed `:` and all `:...` replaced by `*`\n */\nexport const buildRouteUrl = (path: string) => {\n  const url = convertParamSyntax(path)\n  return convertCatchallSyntax(url)\n}\n\n/**\n * The smaller the number the higher the priority with zero indicating highest priority\n *\n * @param url\n *\n * @returns An integer ranging from 0 to Infinity\n */\nexport const calculatePriority = (url: string) => {\n  const depth = url.match(/\\/.+?/g)?.length || 0\n  const specifity = url.match(/\\/:.+?/g)?.length || 0\n  const catchall = url.match(/\\/\\*/g)?.length > 0 ? Infinity : 0\n\n  return depth + specifity + catchall\n}\n\nexport const getHandlers = (\n  handler: HandlerWithReturn | HandlerWithReturn[]\n): HandlerWithReturn[] => {\n  if (!Array.isArray(handler)) return [handler]\n  return handler\n}\n\nexport const getMethodKey = (method: string) => {\n  let methodKey = method.toLowerCase()\n\n  if (methodKey === \"del\") return \"delete\"\n\n  return methodKey\n}\n","import { readdirSync, statSync } from \"fs\"\nimport path from \"path\"\n\nimport type { File, Route } from \"./types\"\n\nimport {\n  buildRoutePath,\n  buildRouteUrl,\n  calculatePriority,\n  isCjs,\n  isFileIgnored,\n  mergePaths,\n  prioritizeRoutes\n} from \"./utils\"\n\nconst IS_ESM = !isCjs()\n\nconst MODULE_IMPORT_PREFIX = IS_ESM ? \"file://\" : \"\"\n\n/**\n * Recursively walk a directory and return all nested files.\n *\n * @param directory The directory path to walk recursively\n * @param tree The tree of directories leading to the current directory\n *\n * @returns An array of all nested files in the specified directory\n */\nexport const walkTree = (directory: string, tree: string[] = []) => {\n  const results: File[] = []\n\n  for (const fileName of readdirSync(directory)) {\n    const filePath = path.join(directory, fileName)\n    const fileStats = statSync(filePath)\n\n    if (fileStats.isDirectory()) {\n      results.push(...walkTree(filePath, [...tree, fileName]))\n    } else {\n      results.push({\n        name: fileName,\n        path: directory,\n        rel: mergePaths(...tree, fileName)\n      })\n    }\n  }\n\n  return results\n}\n\n/**\n * Generate routes from an array of files by loading them as modules.\n *\n * @param files An array of files to generate routes from\n *\n * @returns An array of routes\n */\nexport const generateRoutes = async (files: File[]) => {\n  const routes: Route[] = []\n\n  for (const file of files) {\n    const parsedFile = path.parse(file.rel)\n\n    if (isFileIgnored(parsedFile)) continue\n\n    const routePath = buildRoutePath(parsedFile)\n    const url = buildRouteUrl(routePath)\n    const priority = calculatePriority(url)\n    const exports = await import(\n      MODULE_IMPORT_PREFIX + path.join(file.path, file.name)\n    )\n    routes.push({\n      url,\n      priority,\n      exports\n    })\n  }\n\n  return prioritizeRoutes(routes)\n}\n\nexport function urlToFunctionName(url: string, method: string): string {\n  return [...url.split(\"/\"), method.toLowerCase()]\n    .filter(Boolean)\n    .map((part, i) => {\n      let newPart = part.replace(/[^a-zA-Z0-9]/g, \"\").toLowerCase()\n      if (i > 0) newPart = capitalize(newPart)\n      return newPart\n    })\n    .join(\"\")\n}\n\nexport function urlToArgs(url: string): string {\n  const defaultArgs = [\"options:Record<string, any> = {}\"]\n  const args: string[] = []\n  url\n    .split(\"/\")\n    .filter(part => part.startsWith(\":\"))\n    .forEach(part => {\n      const argName = part.slice(1)\n      if (argName) {\n        args.push(`${argName}: string | number`)\n      }\n    })\n  args.push(...defaultArgs)\n  return args.join(\", \")\n}\n\nexport function urlToUrlString(url: string): string {\n  return url\n    .split(\"/\")\n    .map(part => {\n      if (part.startsWith(\":\")) {\n        return `\\${${part.slice(1)}}`\n      }\n      return part\n    })\n    .join(\"/\")\n}\n\nexport function capitalize(string: string): string {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n","// THIS FILE WAS AUTO-GENERATED\n// Source: /Users/adit/express-file-routing/src/templates/apiClient.mustache\n// Any manual changes will be lost.\nimport { apply } from \"typestache\";\n\nexport const template = `export function {{functionName:string}}({{{args:string}}}): Promise<Response> {\n    return fetch(\\`{{url:string}}\\`, {\n        method: \"{{method:string}}\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        ...options,\n    });\n}\n`;\n\nexport type TemplateType = {\n  functionName: string;\n  args: string;\n  url: string;\n  method: string;\n};\n\nconst render = (args: TemplateType) => {\n  return apply(template, args);\n}\n\nexport default render;\n    ","import fs from \"fs\"\nimport path from \"path\"\n\nimport type { ExpressLike, HandlerWithReturn, Options, Route } from \"./types\"\n\nimport config from \"./config\"\n\nimport { Handler, NextFunction, Request, Response } from \"express\"\nimport {\n  generateRoutes,\n  urlToArgs,\n  urlToFunctionName,\n  urlToUrlString,\n  walkTree\n} from \"./lib\"\nimport { getHandlers, getMethodKey, isHandler } from \"./utils\"\nimport renderClientTemplate from \"./templates/apiClient\"\n\nconst CJS_MAIN_FILENAME =\n  typeof require !== \"undefined\" && require.main?.filename\n\nconst PROJECT_DIRECTORY = CJS_MAIN_FILENAME\n  ? path.dirname(CJS_MAIN_FILENAME)\n  : process.cwd()\n\nconst wrapHandler = (handler: HandlerWithReturn): Handler => {\n  const wrappedHandler: Handler = async (\n    req: Request,\n    res: Response,\n    next: NextFunction\n  ) => {\n    try {\n      const result = await handler(req, res, next)\n      if (result !== undefined) {\n        res.json(result)\n      }\n      res.end()\n    } catch (error) {\n      res.status(500).send(\"Internal Server Error\").end()\n    }\n  }\n  return wrappedHandler\n}\n\nconst makeRoutes = <T extends ExpressLike = ExpressLike>(\n  app: T,\n  routes: Route[],\n  options: Options = {}\n): void => {\n  for (const { url, exports } of routes) {\n    const exportedMethods = Object.entries(exports)\n\n    for (const [method, handler] of exportedMethods) {\n      const methodKey = getMethodKey(method)\n      const handlers = getHandlers(handler)\n\n      if (\n        !options.additionalMethods?.includes(methodKey) &&\n        !config.DEFAULT_METHOD_EXPORTS.includes(methodKey)\n      ) {\n        continue\n      }\n\n      const wrappedHandlers = handlers.map(wrapHandler)\n\n      app[methodKey](url, ...wrappedHandlers)\n    }\n\n    // wildcard default export route matching\n    if (typeof exports.default !== \"undefined\") {\n      if (isHandler(exports.default)) {\n        app.all.apply(app, [\n          url,\n          ...getHandlers(exports.default).map(wrapHandler)\n        ])\n      } else if (\n        typeof exports.default === \"object\" &&\n        isHandler(exports.default.default)\n      ) {\n        app.all.apply(app, [\n          url,\n          ...getHandlers(exports.default.default).map(wrapHandler)\n        ])\n      }\n    }\n  }\n}\n\nconst makeApiClient = (routes: Route[], options: Options = {}): void => {\n  if (!options.apiClientDirectory) {\n    return\n  }\n  // make options.apiClientDirectory if it does not exist\n  const dirExists = fs.existsSync(options.apiClientDirectory)\n  if (!dirExists) {\n    console.log(\n      `API client directory does not exist, creating: ${options.apiClientDirectory}`\n    )\n    fs.mkdirSync(options.apiClientDirectory, { recursive: true })\n  }\n  const apiClientPath = path.join(options.apiClientDirectory, \"apiClient.ts\")\n  let content = \"// Auto-generated API client\\n\\n\"\n  for (const { url, exports } of routes) {\n    const exportedMethods = Object.entries(exports)\n\n    for (const [method, handler] of exportedMethods) {\n      const methodKey = getMethodKey(method)\n      const handlers = getHandlers(handler)\n\n      if (\n        !options.additionalMethods?.includes(methodKey) &&\n        !config.DEFAULT_METHOD_EXPORTS.includes(methodKey)\n      ) {\n        continue\n      }\n      const methodName = methodKey.toUpperCase()\n      if (url.startsWith(\"/api/\")) {\n        content +=\n          renderClientTemplate({\n            url: urlToUrlString(url),\n            args: urlToArgs(url),\n            method: methodName,\n            functionName: urlToFunctionName(url, methodName)\n          }) + \"\\n\"\n      }\n    }\n  }\n\n  fs.writeFileSync(apiClientPath, content, \"utf8\")\n  console.log(`API client generated at: ${apiClientPath}`)\n}\n/**\n * Attach routes to an Express app or router instance\n *\n * ```ts\n * await createRouter(app)\n * ```\n *\n * @param app An express app or router instance\n * @param options An options object (optional)\n */\nconst createRouter = async <T extends ExpressLike = ExpressLike>(\n  app: T,\n  options: Options = {}\n): Promise<T> => {\n  const files = walkTree(\n    options.directory || path.join(PROJECT_DIRECTORY, \"routes\")\n  )\n\n  const routes = await generateRoutes(files)\n  makeRoutes(app, routes, options)\n\n  if (options.apiClientDirectory) {\n    makeApiClient(routes, options)\n  }\n\n  return app\n}\n\nexport default createRouter\n","import { Router, type RouterOptions } from \"express\"\n\nimport type { Options } from \"./types\"\n\nimport createRouter from \"./router\"\n\nexport default createRouter\n\nexport { createRouter }\n\n/**\n * Routing middleware\n *\n * ```ts\n * app.use(\"/\", await router())\n * ```\n *\n * @param options An options object (optional)\n */\nexport const router = async (\n  options: Options & { routerOptions?: RouterOptions } = {}\n) => {\n  const routerOptions = options?.routerOptions || {}\n\n  return await createRouter(Router(routerOptions), options)\n}\n\nexport { Options }\n"],"names":["renderClientTemplate"],"mappings":"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"}